{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/datascience-ui/history-react/interactivePanel.less","webpack:///./src/datascience-ui/interactive-common/collapseButton.tsx","webpack:///./src/datascience-ui/interactive-common/inputHistory.ts","webpack:///./src/datascience-ui/history-react/interactiveCell.tsx","webpack:///./src/datascience-ui/history-react/interactivePanel.tsx","webpack:///./src/datascience-ui/history-react/redux/reducers/creation.ts","webpack:///./src/datascience-ui/history-react/redux/reducers/effects.ts","webpack:///./src/datascience-ui/history-react/redux/reducers/execution.ts","webpack:///./src/datascience-ui/history-react/redux/reducers/index.ts","webpack:///./src/datascience-ui/history-react/index.tsx","webpack:///./src/datascience-ui/history-react/redux/store.ts","webpack:///./src/datascience-ui/history-react/interactivePanel.less?2b98"],"names":["i","chunkIds","length","deferredModules","j","deferredModule","module","chunkId","type","target","script","enumerable","get","getter","value","key","bind","Object","prototype","hasOwnProperty","call","object","property","console","error","err","jsonpArray","webpackJsonpCallback","exports","push","props","render","collapseInputPolygonClassNames","this","open","theme","collapseInputClassNames","visible","tooltip","ariaExpanded","className","title","onClick","version","baseProfile","width","height","points","fill","label","historyStack","completeUp","code","undefined","up","result","adjustCursors","completeDown","down","add","typed","last","reset","currentPos","prop","codeRef","wrapperRef","toggleInputBlock","cellId","getCell","id","cellVM","cell","isCodeCell","data","cell_type","renderNormalToolbar","hasNoSource","file","EmptyFileName","baseTheme","gatherCell","hidden","settings","enableGather","class","image","GatherCode","gotoCell","GoToSourceCode","copyCellCode","Copy","deleteCell","Cancel","onMouseClick","ev","clickCell","stopPropagation","renderControls","busy","state","init","executing","collapseVisible","inputBlockCollapseNeeded","inputBlockShow","editable","executionCount","execution_count","toString","isEditOnlyCell","EditCellId","toolbar","isBusy","count","editExecutionCount","inputBlockOpen","renderInput","editorOptions","history","inputHistory","codeTheme","onCodeChange","onCodeCreated","unfocused","onUnfocused","testMode","showWatermark","ref","monacoTheme","openLink","editorMeasureClassName","keyDown","isEditCell","onEditCellKeyDown","showLineNumbers","font","disableUndoStack","codeVersion","focusPending","unfocus","e","editCell","_code","_file","modelId","codeCreated","hasOutput","finished","getCodeCell","onKeyDown","event","shiftKey","ctrlKey","metaKey","altKey","preventDefault","_cellId","editCellEscape","editCellSubmit","focusedElement","document","activeElement","editorInfo","isSuggesting","nextTabStop","findTabStop","focus","uri","linkClick","showingMarkdownEditor","messages","renderNormalCell","componentDidUpdate","prevProps","selected","focused","giveFocus","scrollCount","scrollAndFlash","shouldComponentUpdate","nextProps","current","scrollIntoView","behavior","block","inline","classList","setTimeout","remove","contains","shouldRender","showCellInputCode","directInput","shouldRenderResults","cellOuterClass","cellWrapperClass","themeMatplotlibPlots","role","tabIndex","expandImage","showPlot","maxTextSize","outputs","hideOutput","contents","endPos","content","slice","isDirty","clear","submitInput","direction","element","allFocusable","querySelectorAll","tabable","Array","filter","indexOf","InteractiveCellComponent","mapStateToProps","main","variableState","variables","mainPanelRef","contentPanelRef","renderCount","internalScrollCount","footerPanelClick","_event","focusInput","getInputExecutionCount","currentExecutionCount","getContentProps","cellVMs","submittedText","skipNextScroll","renderCell","scrollToBottom","scrollDiv","scrollBeyondLastLine","extraSettings","editor","getVariableProps","debugging","showDataExplorer","showDataViewer","skipDefault","closeVariableExplorer","toggleVariableExplorer","pageIn","pageInVariableData","fontSize","size","startIndex","pageSize","getVariableData","_index","containerRef","maxOutputSize","autoFocus","div","isAtBottom","handleScroll","computeIsAtBottom","currentTarget","scroll","componentDidMount","addEventListener","editorLoaded","componentWillUnmount","removeEventListener","editorUnmounted","dynamicFont","fontFamily","family","progressBar","style","rootCss","buildSettingsCss","renderToolbarPanel","renderVariablePanel","onScroll","renderContentPanel","renderFooterPanel","variableExplorerTooltip","deleteAllCells","redo","disabled","redoStack","Redo","undo","undoStack","Undo","interruptKernel","Interrupt","restartKernel","Restart","VariableExplorer","export","SaveAs","expandAll","ExpandAll","collapseAll","CollapseAll","kernel","selectServer","selectKernel","variableProps","monacoReady","contentProps","editCellVM","allowInput","editPanelClass","colorizeInputBox","hasFocus","Creation","isCellSupported","alterCellVM","expanded","newCellVM","newText","text","extractInputBlockText","includes","inputBlockText","split","concat","prepareCellVM","mainState","collapseCellInputCodeByDefault","hasBeenRun","startCell","arg","prevState","payload","updateOrAdd","UpdateModel","source","kind","oldDirty","dirty","newDirty","fullText","currentText","updateCell","finishCell","DeleteAllCells","pushStack","index","findIndex","c","newVMs","_c","unmount","Effects","map","oldVM","updateSettings","newSettings","JSON","parse","newEditorOptions","newFontFamily","newFontSize","vscodeThemeName","knownDark","computeKnownDark","GetCssRequest","isDark","GetMonacoThemeRequest","scrollToCell","scrolled","unfocusCell","Execution","cloneDeep","cells","startDebugging","stopDebugging","matcher","stripFirstMarker","newCell","splitLines","trim","firstLine","isMarkdown","collapseInputs","useQuickEdit","SubmitNewCell","reducerMap","RESTART_KERNEL","INTERRUPT_KERNEL","SelectKernel","SELECT_SERVER","selectJupyterURI","OPEN_SETTINGS","openSettings","EXPORT","exportCells","SAVE","save","SHOW_DATA_VIEWER","DELETE_CELL","ShowPlot","LINK_CLICK","GOTO_CELL","TOGGLE_INPUT_BLOCK","COPY_CELL_CODE","GATHER_CELL","gather","EDIT_CELL","SUBMIT_INPUT","EDITOR_LOADED","started","SCROLL","CLICK_CELL","UNFOCUS_CELL","UNMOUNT","FOCUS_INPUT","StartCell","FinishCell","UpdateCell","Activate","activate","RestartKernel","handleRestarted","GetCssResponse","handleCss","MonacoReady","GetMonacoThemeResponse","monacoThemeChange","GetAllCells","getAllCells","StartProgress","startProgress","StopProgress","stopProgress","UpdateSettings","StartDebugging","StopDebugging","ScrollToCell","UpdateKernel","updateStatus","LocInit","handleLocInit","window","inTestMode","acquireVsCodeApi","ConnectedInteractiveEditor","store","getElementById","options","transform","locals"],"mappings":"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","file":"interactiveWindow.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t\"interactiveWindow\": 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// script path function\n \tfunction jsonpScriptSrc(chunkId) {\n \t\treturn __webpack_require__.p + \"\" + ({\"vendors~dataresource~geojson~modeldebug~nteract_transforms~nteract_transforms_vsdom\":\"vendors~dataresource~geojson~modeldebug~nteract_transforms~nteract_transforms_vsdom\",\"modeldebug\":\"modeldebug\",\"nteract_transforms_vsdom\":\"nteract_transforms_vsdom\",\"vendors~dataresource~vega\":\"vendors~dataresource~vega\",\"vendors~dataresource\":\"vendors~dataresource\",\"vendors~geojson\":\"vendors~geojson\",\"vendors~nteract_transforms\":\"vendors~nteract_transforms\",\"vendors~vega\":\"vendors~vega\",\"vega\":\"vega\",\"vendors~plotly\":\"vendors~plotly\"}[chunkId]||chunkId) + \".bundle.js\"\n \t}\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\t(function (module) {\n \t\t  if (module.exports\n \t\t    && !module.exports.__esModule\n \t\t    && module.exports.default === undefined\n \t\t  ) {\n \t\t    if (module.exports.headers\n \t\t      && module.exports.headers.common\n \t\t      && module.exports.headers.common.Accept\n \t\t      && module.exports.adapter\n \t\t      && module.exports.transformRequest\n \t\t      && module.exports.transformResponse\n \t\t    ) {\n \t\t      return;\n \t\t    }\n \t\t    module.exports.default = module.exports;\n \t\t  }\n \t\t})(module);\n \t\treturn module.exports;\n \t}\n\n \t// This file contains only the entry chunk.\n \t// The chunk loading function for additional chunks\n \t__webpack_require__.e = function requireEnsure(chunkId) {\n \t\tvar promises = [];\n\n\n \t\t// JSONP chunk loading for javascript\n\n \t\tvar installedChunkData = installedChunks[chunkId];\n \t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n \t\t\t// a Promise means \"currently loading\".\n \t\t\tif(installedChunkData) {\n \t\t\t\tpromises.push(installedChunkData[2]);\n \t\t\t} else {\n \t\t\t\t// setup Promise in chunk cache\n \t\t\t\tvar promise = new Promise(function(resolve, reject) {\n \t\t\t\t\tinstalledChunkData = installedChunks[chunkId] = [resolve, reject];\n \t\t\t\t});\n \t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n \t\t\t\t// start chunk loading\n \t\t\t\tvar script = document.createElement('script');\n \t\t\t\tvar onScriptComplete;\n\n \t\t\t\tscript.charset = 'utf-8';\n \t\t\t\tscript.timeout = 120;\n \t\t\t\tif (__webpack_require__.nc) {\n \t\t\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n \t\t\t\t}\n \t\t\t\tscript.src = jsonpScriptSrc(chunkId);\n\n \t\t\t\t// create error before stack unwound to get useful stacktrace later\n \t\t\t\tvar error = new Error();\n \t\t\t\tonScriptComplete = function (event) {\n \t\t\t\t\t// avoid mem leaks in IE.\n \t\t\t\t\tscript.onerror = script.onload = null;\n \t\t\t\t\tclearTimeout(timeout);\n \t\t\t\t\tvar chunk = installedChunks[chunkId];\n \t\t\t\t\tif(chunk !== 0) {\n \t\t\t\t\t\tif(chunk) {\n \t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n \t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n \t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n \t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n \t\t\t\t\t\t\terror.type = errorType;\n \t\t\t\t\t\t\terror.request = realSrc;\n \t\t\t\t\t\t\tchunk[1](error);\n \t\t\t\t\t\t}\n \t\t\t\t\t\tinstalledChunks[chunkId] = undefined;\n \t\t\t\t\t}\n \t\t\t\t};\n \t\t\t\tvar timeout = setTimeout(function(){\n \t\t\t\t\tonScriptComplete({ type: 'timeout', target: script });\n \t\t\t\t}, 120000);\n \t\t\t\tscript.onerror = script.onload = onScriptComplete;\n \t\t\t\tdocument.head.appendChild(script);\n \t\t\t}\n \t\t}\n \t\treturn Promise.all(promises);\n \t};\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// on error function for async loading\n \t__webpack_require__.oe = function(err) { console.error(err); throw err; };\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([1,\"monaco\",\"commons\"]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","exports = module.exports = require(\"../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\nexports.i(require(\"-!../../../node_modules/css-loader/index.js!../interactive-common/common.css\"), \"\");\n\n// module\nexports.push([module.id, \"/* Import common styles and then override them below */\\n.toolbar-menu-bar-child {\\n  background: var(--override-background, var(--vscode-editor-background));\\n  z-index: 10;\\n}\\n#main-panel-content {\\n  grid-area: content;\\n  max-height: 100%;\\n  overflow-x: hidden;\\n  overflow-y: auto;\\n}\\n.messages-result-container {\\n  width: 100%;\\n}\\n.messages-result-container pre {\\n  white-space: pre-wrap;\\n  font-family: monospace;\\n  margin: 0px;\\n  word-break: break-all;\\n}\\n.cell-wrapper {\\n  margin: 0px;\\n  padding: 0px;\\n  display: block;\\n}\\n.cell-result-container {\\n  margin: 0px;\\n  display: grid;\\n  grid-auto-columns: minmax(0, 1fr);\\n}\\n.cell-outer {\\n  display: grid;\\n  grid-template-columns: auto minmax(0, 1fr) 8px;\\n  grid-column-gap: 3px;\\n  width: 100%;\\n}\\n.cell-output {\\n  margin: 0px;\\n  width: 100%;\\n  overflow-x: scroll;\\n  background: transparent;\\n}\\n.cell-output > div {\\n  background: var(--override-widget-background, var(--vscode-notifications-background));\\n}\\nxmp {\\n  margin: 0px;\\n}\\n.cell-input {\\n  margin: 0;\\n}\\n.markdown-cell-output {\\n  width: 100%;\\n  overflow-x: scroll;\\n}\\n.cell-output-text {\\n  white-space: pre-wrap;\\n  word-break: break-all;\\n  overflow-x: hidden;\\n}\\n\", \"\"]);\n\n// exports\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n'use strict';\n\nimport * as React from 'react';\nimport { getLocString } from '../react-common/locReactSide';\n\ninterface ICollapseButtonProps {\n    theme: string;\n    tooltip: string;\n    visible: boolean;\n    open: boolean;\n    label?: string;\n    onClick(): void;\n}\n\nexport class CollapseButton extends React.Component<ICollapseButtonProps> {\n    constructor(props: ICollapseButtonProps) {\n        super(props);\n    }\n\n    public render() {\n        const collapseInputPolygonClassNames = `collapse-input-svg ${\n            this.props.open ? ' collapse-input-svg-rotate' : ''\n        } collapse-input-svg-${this.props.theme}`;\n        const collapseInputClassNames = `collapse-input remove-style ${this.props.visible ? '' : ' invisible'}`;\n        const tooltip = this.props.open\n            ? getLocString('DataScience.collapseSingle', 'Collapse')\n            : getLocString('DataScience.expandSingle', 'Expand');\n        const ariaExpanded = this.props.open ? 'true' : 'false';\n        // https://reactjs.org/docs/conditional-rendering.html#inline-if-with-logical--operator\n        // Comment here just because the (boolean && statement) was new to me\n        return (\n            <button\n                className={collapseInputClassNames}\n                title={tooltip}\n                onClick={this.props.onClick}\n                aria-expanded={ariaExpanded}\n            >\n                <svg version=\"1.1\" baseProfile=\"full\" width=\"8px\" height=\"11px\">\n                    <polygon points=\"0,0 0,10 5,5\" className={collapseInputPolygonClassNames} fill=\"black\" />\n                </svg>\n                {this.props.label && <label className=\"collapseInputLabel\">{this.props.label}</label>}\n            </button>\n        );\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n'use strict';\n\nexport class InputHistory {\n    private historyStack: string[] = [];\n    private up: number | undefined;\n    private down: number | undefined;\n    private last: number | undefined;\n\n    public completeUp(code: string): string {\n        // If going up, only move if anything in the history\n        if (this.historyStack.length > 0) {\n            if (this.up === undefined) {\n                this.up = 0;\n            }\n\n            const result = this.up < this.historyStack.length ? this.historyStack[this.up] : code;\n            this.adjustCursors(this.up);\n            return result;\n        }\n\n        return code;\n    }\n\n    public completeDown(code: string): string {\n        // If going down, move and then return something if we have a position\n        if (this.historyStack.length > 0 && this.down !== undefined) {\n            const result = this.historyStack[this.down];\n            this.adjustCursors(this.down);\n            return result;\n        }\n\n        return code;\n    }\n\n    public add(code: string, typed: boolean) {\n        // Compute our new history. Behavior depends upon if the user typed it in or\n        // just used the arrows\n\n        // Only skip adding a dupe if it's the same as the top item. Otherwise\n        // add it as normal.\n        this.historyStack =\n            this.last === 0 && this.historyStack.length > 0 && this.historyStack[this.last] === code\n                ? this.historyStack\n                : [code, ...this.historyStack];\n\n        // Position is more complicated. If we typed something start over\n        if (typed) {\n            this.reset();\n        } else {\n            // We want our next up push to match the index of the item that was\n            // actually entered.\n            if (this.last === 0) {\n                this.up = undefined;\n                this.down = undefined;\n            } else if (this.last) {\n                this.up = this.last + 1;\n                this.down = this.last - 1;\n            }\n        }\n    }\n\n    private reset() {\n        this.up = undefined;\n        this.down = undefined;\n    }\n\n    private adjustCursors(currentPos: number) {\n        // Save last position we entered.\n        this.last = currentPos;\n\n        // For a single item, ony up works. But never modify it.\n        if (this.historyStack.length > 1) {\n            if (currentPos < this.historyStack.length) {\n                this.up = currentPos + 1;\n            } else {\n                this.up = this.historyStack.length;\n\n                // If we go off the end, don't make the down go up to the last.\n                // CMD prompt behaves this way. Down is always one off.\n                currentPos = this.historyStack.length - 1;\n            }\n            if (currentPos > 0) {\n                this.down = currentPos - 1;\n            } else {\n                this.down = undefined;\n            }\n        }\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n'use strict';\nimport '../../client/common/extensions';\n\nimport { nbformat } from '@jupyterlab/coreutils';\nimport * as fastDeepEqual from 'fast-deep-equal';\nimport * as monacoEditor from 'monaco-editor/esm/vs/editor/editor.api';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\n\nimport { Identifiers } from '../../client/datascience/constants';\nimport { CellState, IDataScienceExtraSettings } from '../../client/datascience/types';\nimport { CellInput } from '../interactive-common/cellInput';\nimport { CellOutput } from '../interactive-common/cellOutput';\nimport { CollapseButton } from '../interactive-common/collapseButton';\nimport { ExecutionCount } from '../interactive-common/executionCount';\nimport { InformationMessages } from '../interactive-common/informationMessages';\nimport { InputHistory } from '../interactive-common/inputHistory';\nimport { ICellViewModel, IFont } from '../interactive-common/mainState';\nimport { IKeyboardEvent } from '../react-common/event';\nimport { Image, ImageName } from '../react-common/image';\nimport { ImageButton } from '../react-common/imageButton';\nimport { getLocString } from '../react-common/locReactSide';\nimport { IMonacoModelContentChangeEvent } from '../react-common/monacoHelpers';\nimport { actionCreators } from './redux/actions';\n\ninterface IInteractiveCellBaseProps {\n    role?: string;\n    cellVM: ICellViewModel;\n    baseTheme: string;\n    codeTheme: string;\n    testMode?: boolean;\n    autoFocus: boolean;\n    maxTextSize?: number;\n    showWatermark: boolean;\n    monacoTheme: string | undefined;\n    editorOptions?: monacoEditor.editor.IEditorOptions;\n    editExecutionCount?: string;\n    editorMeasureClassName?: string;\n    font: IFont;\n    settings: IDataScienceExtraSettings;\n    focusPending: number;\n}\n\ntype IInteractiveCellProps = IInteractiveCellBaseProps & typeof actionCreators;\n\n// tslint:disable: react-this-binding-issue\nexport class InteractiveCell extends React.Component<IInteractiveCellProps> {\n    private codeRef: React.RefObject<CellInput> = React.createRef<CellInput>();\n    private wrapperRef: React.RefObject<HTMLDivElement> = React.createRef<HTMLDivElement>();\n    private inputHistory: InputHistory | undefined;\n\n    constructor(prop: IInteractiveCellProps) {\n        super(prop);\n        this.state = { showingMarkdownEditor: false };\n        if (prop.cellVM.cell.id === Identifiers.EditCellId) {\n            this.inputHistory = new InputHistory();\n        }\n    }\n\n    public render() {\n        if (this.props.cellVM.cell.data.cell_type === 'messages') {\n            return <InformationMessages messages={this.props.cellVM.cell.data.messages} />;\n        } else {\n            return this.renderNormalCell();\n        }\n    }\n\n    public componentDidUpdate(prevProps: IInteractiveCellProps) {\n        if (this.props.cellVM.selected && !prevProps.cellVM.selected && !this.props.cellVM.focused) {\n            this.giveFocus();\n        }\n        if (this.props.cellVM.scrollCount !== prevProps.cellVM.scrollCount) {\n            this.scrollAndFlash();\n        }\n    }\n\n    public shouldComponentUpdate(nextProps: IInteractiveCellProps): boolean {\n        return !fastDeepEqual(this.props, nextProps);\n    }\n\n    private scrollAndFlash() {\n        if (this.wrapperRef && this.wrapperRef.current) {\n            if (this.wrapperRef.current.scrollIntoView) {\n                this.wrapperRef.current.scrollIntoView({ behavior: 'auto', block: 'nearest', inline: 'nearest' });\n            }\n            this.wrapperRef.current.classList.add('flash');\n            setTimeout(() => {\n                if (this.wrapperRef.current) {\n                    this.wrapperRef.current.classList.remove('flash');\n                }\n            }, 1000);\n        }\n    }\n\n    private giveFocus() {\n        // Start out with ourselves\n        if (this.wrapperRef && this.wrapperRef.current) {\n            // Give focus to the cell if not already owning focus\n            if (!this.wrapperRef.current.contains(document.activeElement)) {\n                this.wrapperRef.current.focus();\n            }\n\n            // Scroll into view (since we have focus). However this function\n            // is not supported on enzyme\n            if (this.wrapperRef.current.scrollIntoView) {\n                this.wrapperRef.current.scrollIntoView({ behavior: 'auto', block: 'nearest', inline: 'nearest' });\n            }\n        }\n    }\n\n    private toggleInputBlock = () => {\n        const cellId: string = this.getCell().id;\n        this.props.toggleInputBlock(cellId);\n    };\n\n    private getCell = () => {\n        return this.props.cellVM.cell;\n    };\n\n    private isCodeCell = () => {\n        return this.props.cellVM.cell.data.cell_type === 'code';\n    };\n\n    private renderNormalCell() {\n        const allowsPlainInput =\n            this.props.settings.showCellInputCode || this.props.cellVM.directInput || this.props.cellVM.editable;\n        const shouldRender = allowsPlainInput || this.shouldRenderResults();\n        const cellOuterClass = this.props.cellVM.editable ? 'cell-outer-editable' : 'cell-outer';\n        const cellWrapperClass = this.props.cellVM.editable ? 'cell-wrapper' : 'cell-wrapper cell-wrapper-noneditable';\n        const themeMatplotlibPlots = this.props.settings.themeMatplotlibPlots ? true : false;\n\n        // Only render if we are allowed to.\n        if (shouldRender) {\n            return (\n                <div\n                    className={cellWrapperClass}\n                    role={this.props.role}\n                    ref={this.wrapperRef}\n                    tabIndex={0}\n                    onKeyDown={this.onKeyDown}\n                    onClick={this.onMouseClick}\n                >\n                    <div className={cellOuterClass}>\n                        {this.renderControls()}\n                        <div className=\"content-div\">\n                            <div className=\"cell-result-container\">\n                                {this.renderInput()}\n                                <div>\n                                    <CellOutput\n                                        cellVM={this.props.cellVM}\n                                        baseTheme={this.props.baseTheme}\n                                        expandImage={this.props.showPlot}\n                                        maxTextSize={this.props.maxTextSize}\n                                        themeMatplotlibPlots={themeMatplotlibPlots}\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            );\n        }\n\n        // Shouldn't be rendered because not allowing empty input and not a direct input cell\n        return null;\n    }\n\n    private renderNormalToolbar = () => {\n        const cell = this.getCell();\n        const cellId = cell.id;\n        const gotoCode = () => this.props.gotoCell(cellId);\n        const deleteCode = () => this.props.deleteCell(cellId);\n        const copyCode = () => this.props.copyCellCode(cellId);\n        const gatherCode = () => this.props.gatherCell(cellId);\n        const hasNoSource = !cell || !cell.file || cell.file === Identifiers.EmptyFileName;\n\n        return (\n            <div className=\"cell-toolbar\" key={0}>\n                <ImageButton\n                    baseTheme={this.props.baseTheme}\n                    onClick={gatherCode}\n                    hidden={!this.props.settings.enableGather}\n                    tooltip={getLocString('DataScience.gatherCodeTooltip', 'Gather code')}\n                >\n                    <Image baseTheme={this.props.baseTheme} class=\"image-button-image\" image={ImageName.GatherCode} />\n                </ImageButton>\n                <ImageButton\n                    baseTheme={this.props.baseTheme}\n                    onClick={gotoCode}\n                    tooltip={getLocString('DataScience.gotoCodeButtonTooltip', 'Go to code')}\n                    hidden={hasNoSource}\n                >\n                    <Image\n                        baseTheme={this.props.baseTheme}\n                        class=\"image-button-image\"\n                        image={ImageName.GoToSourceCode}\n                    />\n                </ImageButton>\n                <ImageButton\n                    baseTheme={this.props.baseTheme}\n                    onClick={copyCode}\n                    tooltip={getLocString('DataScience.copyBackToSourceButtonTooltip', 'Paste code into file')}\n                    hidden={!hasNoSource}\n                >\n                    <Image baseTheme={this.props.baseTheme} class=\"image-button-image\" image={ImageName.Copy} />\n                </ImageButton>\n                <ImageButton\n                    baseTheme={this.props.baseTheme}\n                    onClick={deleteCode}\n                    tooltip={getLocString('DataScience.deleteButtonTooltip', 'Remove Cell')}\n                >\n                    <Image baseTheme={this.props.baseTheme} class=\"image-button-image\" image={ImageName.Cancel} />\n                </ImageButton>\n            </div>\n        );\n    };\n\n    private onMouseClick = (ev: React.MouseEvent<HTMLDivElement>) => {\n        // When we receive a click, propagate upwards. Might change our state\n        if (this.props.clickCell) {\n            ev.stopPropagation();\n            this.props.clickCell(this.props.cellVM.cell.id);\n        }\n    };\n\n    private renderControls = () => {\n        const busy =\n            this.props.cellVM.cell.state === CellState.init || this.props.cellVM.cell.state === CellState.executing;\n        const collapseVisible =\n            this.props.cellVM.inputBlockCollapseNeeded &&\n            this.props.cellVM.inputBlockShow &&\n            !this.props.cellVM.editable &&\n            this.isCodeCell();\n        const executionCount =\n            this.props.cellVM &&\n            this.props.cellVM.cell &&\n            this.props.cellVM.cell.data &&\n            this.props.cellVM.cell.data.execution_count\n                ? this.props.cellVM.cell.data.execution_count.toString()\n                : '-';\n        const isEditOnlyCell = this.props.cellVM.cell.id === Identifiers.EditCellId;\n        const toolbar = isEditOnlyCell ? null : this.renderNormalToolbar();\n\n        return (\n            <div className=\"controls-div\">\n                <ExecutionCount\n                    isBusy={busy}\n                    count={\n                        isEditOnlyCell && this.props.editExecutionCount ? this.props.editExecutionCount : executionCount\n                    }\n                    visible={this.isCodeCell()}\n                />\n                <CollapseButton\n                    theme={this.props.baseTheme}\n                    visible={collapseVisible}\n                    open={this.props.cellVM.inputBlockOpen}\n                    onClick={this.toggleInputBlock}\n                    tooltip={getLocString('DataScience.collapseInputTooltip', 'Collapse input block')}\n                />\n                {toolbar}\n            </div>\n        );\n    };\n\n    private renderInput = () => {\n        if (this.isCodeCell()) {\n            return (\n                <CellInput\n                    cellVM={this.props.cellVM}\n                    editorOptions={this.props.editorOptions}\n                    history={this.inputHistory}\n                    codeTheme={this.props.codeTheme}\n                    onCodeChange={this.onCodeChange}\n                    onCodeCreated={this.onCodeCreated}\n                    unfocused={this.onUnfocused}\n                    testMode={this.props.testMode ? true : false}\n                    showWatermark={this.props.showWatermark}\n                    ref={this.codeRef}\n                    monacoTheme={this.props.monacoTheme}\n                    openLink={this.openLink}\n                    editorMeasureClassName={this.props.editorMeasureClassName}\n                    keyDown={this.isEditCell() ? this.onEditCellKeyDown : undefined}\n                    showLineNumbers={this.props.cellVM.showLineNumbers}\n                    font={this.props.font}\n                    disableUndoStack={this.props.cellVM.cell.id !== Identifiers.EditCellId}\n                    codeVersion={this.props.cellVM.codeVersion ? this.props.cellVM.codeVersion : 0}\n                    focusPending={this.props.focusPending}\n                />\n            );\n        }\n        return null;\n    };\n\n    private isEditCell(): boolean {\n        return this.getCell().id === Identifiers.EditCellId;\n    }\n\n    private onUnfocused = () => {\n        this.props.unfocus(this.getCell().id);\n    };\n\n    private onCodeChange = (e: IMonacoModelContentChangeEvent) => {\n        this.props.editCell(this.getCell().id, e);\n    };\n\n    private onCodeCreated = (_code: string, _file: string, cellId: string, modelId: string) => {\n        this.props.codeCreated(cellId, modelId);\n    };\n\n    private hasOutput = () => {\n        return (\n            this.getCell().state === CellState.finished ||\n            this.getCell().state === CellState.error ||\n            this.getCell().state === CellState.executing\n        );\n    };\n\n    private getCodeCell = () => {\n        return this.props.cellVM.cell.data as nbformat.ICodeCell;\n    };\n\n    private shouldRenderResults(): boolean {\n        return (\n            this.isCodeCell() &&\n            this.hasOutput() &&\n            this.getCodeCell().outputs &&\n            this.getCodeCell().outputs.length > 0 &&\n            !this.props.cellVM.hideOutput\n        );\n    }\n\n    private onKeyDown = (event: React.KeyboardEvent<HTMLDivElement>) => {\n        // Handle keydown events for the entire cell\n        if (this.getCell().id === Identifiers.EditCellId) {\n            const e: IKeyboardEvent = {\n                code: event.key,\n                shiftKey: event.shiftKey,\n                ctrlKey: event.ctrlKey,\n                metaKey: event.metaKey,\n                altKey: event.altKey,\n                target: event.target as HTMLDivElement,\n                stopPropagation: () => event.stopPropagation(),\n                preventDefault: () => event.preventDefault()\n            };\n            this.onEditCellKeyDown(Identifiers.EditCellId, e);\n        }\n    };\n\n    private onEditCellKeyDown = (_cellId: string, e: IKeyboardEvent) => {\n        if (e.code === 'Escape') {\n            this.editCellEscape(e);\n        } else if (e.code === 'Enter' && e.shiftKey) {\n            this.editCellSubmit(e);\n        } else if (e.code === 'NumpadEnter' && e.shiftKey) {\n            this.editCellSubmit(e);\n        }\n    };\n\n    private editCellSubmit(e: IKeyboardEvent) {\n        if (e.editorInfo && e.editorInfo.contents) {\n            // Prevent shift+enter from turning into a enter\n            e.stopPropagation();\n            e.preventDefault();\n\n            // Remove empty lines off the end\n            let endPos = e.editorInfo.contents.length - 1;\n            while (endPos >= 0 && e.editorInfo.contents[endPos] === '\\n') {\n                endPos -= 1;\n            }\n            const content = e.editorInfo.contents.slice(0, endPos + 1);\n\n            // Send to the input history too if necessary\n            if (this.inputHistory) {\n                this.inputHistory.add(content, e.editorInfo.isDirty);\n            }\n\n            // Clear our editor\n            e.editorInfo.clear();\n\n            // Send to jupyter\n            this.props.submitInput(content, this.props.cellVM.cell.id);\n        }\n    }\n\n    private findTabStop(direction: number, element: Element): HTMLElement | undefined {\n        if (element) {\n            const allFocusable = document.querySelectorAll('input, button, select, textarea, a[href]');\n            if (allFocusable) {\n                const tabable = Array.prototype.filter.call(allFocusable, (i: HTMLElement) => i.tabIndex >= 0);\n                const self = tabable.indexOf(element);\n                return direction >= 0 ? tabable[self + 1] || tabable[0] : tabable[self - 1] || tabable[0];\n            }\n        }\n    }\n\n    private editCellEscape = (e: IKeyboardEvent) => {\n        const focusedElement = document.activeElement;\n        if (focusedElement !== null && e.editorInfo && !e.editorInfo.isSuggesting) {\n            const nextTabStop = this.findTabStop(1, focusedElement);\n            if (nextTabStop) {\n                nextTabStop.focus();\n            }\n        }\n    };\n\n    private openLink = (uri: monacoEditor.Uri) => {\n        this.props.linkClick(uri.toString());\n    };\n}\n\n// Main export, return a redux connected editor\nexport const InteractiveCellComponent = connect(null, actionCreators)(InteractiveCell);\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Identifiers } from '../../client/datascience/constants';\nimport { buildSettingsCss } from '../interactive-common/buildSettingsCss';\nimport { ContentPanel, IContentPanelProps } from '../interactive-common/contentPanel';\nimport { handleLinkClick } from '../interactive-common/handlers';\nimport { KernelSelection } from '../interactive-common/kernelSelection';\nimport { ICellViewModel } from '../interactive-common/mainState';\nimport { IMainWithVariables, IStore } from '../interactive-common/redux/store';\nimport { IVariablePanelProps, VariablePanel } from '../interactive-common/variablePanel';\nimport { ErrorBoundary } from '../react-common/errorBoundary';\nimport { Image, ImageName } from '../react-common/image';\nimport { ImageButton } from '../react-common/imageButton';\nimport { getLocString } from '../react-common/locReactSide';\nimport { Progress } from '../react-common/progress';\nimport { InteractiveCellComponent } from './interactiveCell';\nimport './interactivePanel.less';\nimport { actionCreators } from './redux/actions';\n\nexport type IInteractivePanelProps = IMainWithVariables & typeof actionCreators;\n\nfunction mapStateToProps(state: IStore): IMainWithVariables {\n    return { ...state.main, variableState: state.variables };\n}\n\nexport class InteractivePanel extends React.Component<IInteractivePanelProps> {\n    private mainPanelRef: React.RefObject<HTMLDivElement> = React.createRef<HTMLDivElement>();\n    private contentPanelRef: React.RefObject<ContentPanel> = React.createRef<ContentPanel>();\n    private renderCount: number = 0;\n    private internalScrollCount: number = 0;\n\n    constructor(props: IInteractivePanelProps) {\n        super(props);\n    }\n\n    public componentDidMount() {\n        document.addEventListener('click', this.linkClick, true);\n        this.props.editorLoaded();\n    }\n\n    public componentWillUnmount() {\n        document.removeEventListener('click', this.linkClick);\n        this.props.editorUnmounted();\n    }\n\n    public render() {\n        const dynamicFont: React.CSSProperties = {\n            fontSize: this.props.font.size,\n            fontFamily: this.props.font.family\n        };\n\n        const progressBar = this.props.busy && !this.props.testMode ? <Progress /> : undefined;\n\n        // If in test mode, update our count. Use this to determine how many renders a normal update takes.\n        if (this.props.testMode) {\n            this.renderCount = this.renderCount + 1;\n        }\n\n        return (\n            <div id=\"main-panel\" ref={this.mainPanelRef} role=\"Main\" style={dynamicFont}>\n                <div className=\"styleSetter\">\n                    <style>{`${this.props.rootCss ? this.props.rootCss : ''}\n${buildSettingsCss(this.props.settings)}`}</style>\n                </div>\n                <header id=\"main-panel-toolbar\">\n                    {this.renderToolbarPanel()}\n                    {progressBar}\n                </header>\n                <section\n                    id=\"main-panel-variable\"\n                    aria-label={getLocString('DataScience.collapseVariableExplorerLabel', 'Variables')}\n                >\n                    {this.renderVariablePanel(this.props.baseTheme)}\n                </section>\n                <main id=\"main-panel-content\" onScroll={this.handleScroll}>\n                    {this.renderContentPanel(this.props.baseTheme)}\n                </main>\n                <section\n                    id=\"main-panel-footer\"\n                    onClick={this.footerPanelClick}\n                    aria-label={getLocString('DataScience.editSection', 'Input new cells here')}\n                >\n                    {this.renderFooterPanel(this.props.baseTheme)}\n                </section>\n            </div>\n        );\n    }\n\n    // Make the entire footer focus our input, instead of having to click directly on the monaco editor\n    private footerPanelClick = (_event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n        this.props.focusInput();\n    };\n\n    // tslint:disable-next-line: max-func-body-length\n    private renderToolbarPanel() {\n        const variableExplorerTooltip = this.props.variableState.visible\n            ? getLocString('DataScience.collapseVariableExplorerTooltip', 'Hide variables active in jupyter kernel')\n            : getLocString('DataScience.expandVariableExplorerTooltip', 'Show variables active in jupyter kernel');\n\n        return (\n            <div id=\"toolbar-panel\">\n                <div className=\"toolbar-menu-bar\">\n                    <div className=\"toolbar-menu-bar-child\">\n                        <ImageButton\n                            baseTheme={this.props.baseTheme}\n                            onClick={this.props.deleteAllCells}\n                            tooltip={getLocString('DataScience.clearAll', 'Remove all cells')}\n                        >\n                            <Image\n                                baseTheme={this.props.baseTheme}\n                                class=\"image-button-image\"\n                                image={ImageName.Cancel}\n                            />\n                        </ImageButton>\n                        <ImageButton\n                            baseTheme={this.props.baseTheme}\n                            onClick={this.props.redo}\n                            disabled={this.props.redoStack.length === 0}\n                            tooltip={getLocString('DataScience.redo', 'Redo')}\n                        >\n                            <Image baseTheme={this.props.baseTheme} class=\"image-button-image\" image={ImageName.Redo} />\n                        </ImageButton>\n                        <ImageButton\n                            baseTheme={this.props.baseTheme}\n                            onClick={this.props.undo}\n                            disabled={this.props.undoStack.length === 0}\n                            tooltip={getLocString('DataScience.undo', 'Undo')}\n                        >\n                            <Image baseTheme={this.props.baseTheme} class=\"image-button-image\" image={ImageName.Undo} />\n                        </ImageButton>\n                        <ImageButton\n                            baseTheme={this.props.baseTheme}\n                            onClick={this.props.interruptKernel}\n                            disabled={this.props.busy}\n                            tooltip={getLocString('DataScience.interruptKernel', 'Interrupt IPython kernel')}\n                        >\n                            <Image\n                                baseTheme={this.props.baseTheme}\n                                class=\"image-button-image\"\n                                image={ImageName.Interrupt}\n                            />\n                        </ImageButton>\n                        <ImageButton\n                            baseTheme={this.props.baseTheme}\n                            onClick={this.props.restartKernel}\n                            disabled={this.props.busy}\n                            tooltip={getLocString('DataScience.restartServer', 'Restart IPython kernel')}\n                        >\n                            <Image\n                                baseTheme={this.props.baseTheme}\n                                class=\"image-button-image\"\n                                image={ImageName.Restart}\n                            />\n                        </ImageButton>\n                        <ImageButton\n                            baseTheme={this.props.baseTheme}\n                            onClick={this.props.toggleVariableExplorer}\n                            tooltip={variableExplorerTooltip}\n                        >\n                            <Image\n                                baseTheme={this.props.baseTheme}\n                                class=\"image-button-image\"\n                                image={ImageName.VariableExplorer}\n                            />\n                        </ImageButton>\n                        <ImageButton\n                            baseTheme={this.props.baseTheme}\n                            onClick={this.props.export}\n                            disabled={this.props.cellVMs.length === 0 || this.props.busy}\n                            tooltip={getLocString('DataScience.export', 'Export as Jupyter notebook')}\n                        >\n                            <Image\n                                baseTheme={this.props.baseTheme}\n                                class=\"image-button-image\"\n                                image={ImageName.SaveAs}\n                            />\n                        </ImageButton>\n                        <ImageButton\n                            baseTheme={this.props.baseTheme}\n                            onClick={this.props.expandAll}\n                            disabled={this.props.cellVMs.length === 0}\n                            tooltip={getLocString('DataScience.expandAll', 'Expand all cell inputs')}\n                        >\n                            <Image\n                                baseTheme={this.props.baseTheme}\n                                class=\"image-button-image\"\n                                image={ImageName.ExpandAll}\n                            />\n                        </ImageButton>\n                        <ImageButton\n                            baseTheme={this.props.baseTheme}\n                            onClick={this.props.collapseAll}\n                            disabled={this.props.cellVMs.length === 0}\n                            tooltip={getLocString('DataScience.collapseAll', 'Collapse all cell inputs')}\n                        >\n                            <Image\n                                baseTheme={this.props.baseTheme}\n                                class=\"image-button-image\"\n                                image={ImageName.CollapseAll}\n                            />\n                        </ImageButton>\n                    </div>\n                    <KernelSelection\n                        baseTheme={this.props.baseTheme}\n                        font={this.props.font}\n                        kernel={this.props.kernel}\n                        selectServer={this.props.selectServer}\n                        selectKernel={this.props.selectKernel}\n                    />\n                </div>\n            </div>\n        );\n    }\n\n    private renderVariablePanel(baseTheme: string) {\n        if (this.props.variableState.visible) {\n            const variableProps = this.getVariableProps(baseTheme);\n            return <VariablePanel {...variableProps} />;\n        }\n\n        return null;\n    }\n\n    private renderContentPanel(baseTheme: string) {\n        // Skip if the tokenizer isn't finished yet. It needs\n        // to finish loading so our code editors work.\n        if (!this.props.monacoReady && !this.props.testMode) {\n            return null;\n        }\n\n        // Otherwise render our cells.\n        const contentProps = this.getContentProps(baseTheme);\n        return <ContentPanel {...contentProps} ref={this.contentPanelRef} />;\n    }\n\n    private renderFooterPanel(baseTheme: string) {\n        // Skip if the tokenizer isn't finished yet. It needs\n        // to finish loading so our code editors work.\n        if (\n            !this.props.monacoReady ||\n            !this.props.editCellVM ||\n            !this.props.settings ||\n            !this.props.editorOptions ||\n            !this.props.settings.allowInput\n        ) {\n            return null;\n        }\n\n        const maxOutputSize = this.props.settings.maxOutputSize;\n        const maxTextSize = maxOutputSize && maxOutputSize < 10000 && maxOutputSize > 0 ? maxOutputSize : undefined;\n        const executionCount = this.getInputExecutionCount();\n        const editPanelClass = this.props.settings.colorizeInputBox ? 'edit-panel-colorized' : 'edit-panel';\n\n        return (\n            <div className={editPanelClass}>\n                <ErrorBoundary>\n                    <InteractiveCellComponent\n                        role=\"form\"\n                        editorOptions={this.props.editorOptions}\n                        maxTextSize={maxTextSize}\n                        autoFocus={document.hasFocus()}\n                        testMode={this.props.testMode}\n                        cellVM={this.props.editCellVM}\n                        baseTheme={baseTheme}\n                        codeTheme={this.props.codeTheme}\n                        showWatermark={true}\n                        editExecutionCount={executionCount.toString()}\n                        monacoTheme={this.props.monacoTheme}\n                        font={this.props.font}\n                        settings={this.props.settings}\n                        focusPending={this.props.focusPending}\n                    />\n                </ErrorBoundary>\n            </div>\n        );\n    }\n\n    private getInputExecutionCount = (): number => {\n        return this.props.currentExecutionCount + 1;\n    };\n\n    private getContentProps = (baseTheme: string): IContentPanelProps => {\n        return {\n            baseTheme: baseTheme,\n            cellVMs: this.props.cellVMs,\n            testMode: this.props.testMode,\n            codeTheme: this.props.codeTheme,\n            submittedText: this.props.submittedText,\n            settings: this.props.settings,\n            skipNextScroll: this.props.skipNextScroll ? true : false,\n            editable: false,\n            renderCell: this.renderCell,\n            scrollToBottom: this.scrollDiv,\n            scrollBeyondLastLine: this.props.settings\n                ? this.props.settings.extraSettings.editor.scrollBeyondLastLine\n                : false\n        };\n    };\n    private getVariableProps = (baseTheme: string): IVariablePanelProps => {\n        return {\n            variables: this.props.variableState.variables,\n            debugging: this.props.debugging,\n            busy: this.props.busy,\n            showDataExplorer: this.props.showDataViewer,\n            skipDefault: this.props.skipDefault,\n            testMode: this.props.testMode,\n            closeVariableExplorer: this.props.toggleVariableExplorer,\n            baseTheme: baseTheme,\n            pageIn: this.pageInVariableData,\n            fontSize: this.props.font.size,\n            executionCount: this.props.currentExecutionCount\n        };\n    };\n\n    private pageInVariableData = (startIndex: number, pageSize: number) => {\n        this.props.getVariableData(this.props.currentExecutionCount, startIndex, pageSize);\n    };\n\n    private renderCell = (\n        cellVM: ICellViewModel,\n        _index: number,\n        containerRef?: React.RefObject<HTMLDivElement>\n    ): JSX.Element | null => {\n        if (this.props.settings && this.props.editorOptions) {\n            return (\n                <div key={cellVM.cell.id} id={cellVM.cell.id} ref={containerRef}>\n                    <ErrorBoundary>\n                        <InteractiveCellComponent\n                            role=\"listitem\"\n                            editorOptions={this.props.editorOptions}\n                            maxTextSize={this.props.settings.maxOutputSize}\n                            autoFocus={false}\n                            testMode={this.props.testMode}\n                            cellVM={cellVM}\n                            baseTheme={this.props.baseTheme}\n                            codeTheme={this.props.codeTheme}\n                            showWatermark={cellVM.cell.id === Identifiers.EditCellId}\n                            editExecutionCount={this.getInputExecutionCount().toString()}\n                            monacoTheme={this.props.monacoTheme}\n                            font={this.props.font}\n                            settings={this.props.settings}\n                            focusPending={this.props.focusPending}\n                        />\n                    </ErrorBoundary>\n                </div>\n            );\n        } else {\n            return null;\n        }\n    };\n\n    // This handles the scrolling. Its called from the props of contentPanel.\n    // We only scroll when the state indicates we are at the bottom of the interactive window,\n    // otherwise it sometimes scrolls when the user wasn't at the bottom.\n    private scrollDiv = (div: HTMLDivElement) => {\n        if (this.props.isAtBottom) {\n            this.internalScrollCount += 1;\n            // Force auto here as smooth scrolling can be canceled by updates to the window\n            // from elsewhere (and keeping track of these would make this hard to maintain)\n            if (div && div.scrollIntoView) {\n                div.scrollIntoView({ behavior: 'auto', block: 'nearest', inline: 'nearest' });\n            }\n        }\n    };\n\n    private handleScroll = (e: React.UIEvent<HTMLDivElement>) => {\n        if (this.internalScrollCount > 0) {\n            this.internalScrollCount -= 1;\n        } else if (this.contentPanelRef.current) {\n            const isAtBottom = this.contentPanelRef.current.computeIsAtBottom(e.currentTarget);\n            this.props.scroll(isAtBottom);\n        }\n    };\n\n    private linkClick = (ev: MouseEvent) => {\n        handleLinkClick(ev, this.props.linkClick);\n    };\n}\n\n// Main export, return a redux connected editor\nexport function getConnectedInteractiveEditor() {\n    return connect(mapStateToProps, actionCreators)(InteractivePanel);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n'use strict';\nimport { Identifiers } from '../../../../client/datascience/constants';\nimport { InteractiveWindowMessages } from '../../../../client/datascience/interactive-common/interactiveWindowTypes';\nimport { ICell, IDataScienceExtraSettings } from '../../../../client/datascience/types';\nimport { removeLinesFromFrontAndBack } from '../../../common';\nimport { createCellVM, extractInputText, ICellViewModel, IMainState } from '../../../interactive-common/mainState';\nimport { postActionToExtension } from '../../../interactive-common/redux/helpers';\nimport { Helpers } from '../../../interactive-common/redux/reducers/helpers';\nimport { IAddCellAction, ICellAction } from '../../../interactive-common/redux/reducers/types';\nimport { InteractiveReducerArg } from '../mapping';\n\nexport namespace Creation {\n    function isCellSupported(state: IMainState, cell: ICell): boolean {\n        // Skip message cells in test mode\n        if (state.testMode) {\n            return cell.data.cell_type !== 'messages';\n        }\n        return true;\n    }\n\n    function extractInputBlockText(cellVM: ICellViewModel, settings?: IDataScienceExtraSettings) {\n        // Use the base function first\n        const text = extractInputText(cellVM, settings);\n\n        // Then remove text on the front and back. We only do this for the interactive window\n        return removeLinesFromFrontAndBack(text);\n    }\n\n    export function alterCellVM(\n        cellVM: ICellViewModel,\n        settings?: IDataScienceExtraSettings,\n        visible?: boolean,\n        expanded?: boolean\n    ): ICellViewModel {\n        if (cellVM.cell.data.cell_type === 'code') {\n            // If we are already in the correct state, return back our initial cell vm\n            if (cellVM.inputBlockShow === visible && cellVM.inputBlockOpen === expanded) {\n                return cellVM;\n            }\n\n            const newCellVM = { ...cellVM };\n            if (cellVM.inputBlockShow !== visible) {\n                if (visible) {\n                    // Show the cell, the rest of the function will add on correct collapse state\n                    newCellVM.inputBlockShow = true;\n                } else {\n                    // Hide this cell\n                    newCellVM.inputBlockShow = false;\n                }\n            }\n\n            // No elseif as we want newly visible cells to pick up the correct expand / collapse state\n            if (cellVM.inputBlockOpen !== expanded && cellVM.inputBlockCollapseNeeded && cellVM.inputBlockShow) {\n                let newText = extractInputBlockText(cellVM, settings);\n\n                // While extracting the text, we might eliminate all extra lines\n                if (newText.includes('\\n')) {\n                    if (expanded) {\n                        // Expand the cell\n                        newCellVM.inputBlockOpen = true;\n                        newCellVM.inputBlockText = newText;\n                    } else {\n                        // Collapse the cell\n                        if (newText.length > 0) {\n                            newText = newText.split('\\n', 1)[0];\n                            newText = newText.slice(0, 255); // Slice to limit length, slicing past length is fine\n                            newText = newText.concat('...');\n                        }\n\n                        newCellVM.inputBlockOpen = false;\n                        newCellVM.inputBlockText = newText;\n                    }\n                } else {\n                    // If all lines eliminated, get rid of the collapse bar.\n                    newCellVM.inputBlockCollapseNeeded = false;\n                    newCellVM.inputBlockOpen = true;\n                    newCellVM.inputBlockText = newText;\n                }\n            }\n\n            return newCellVM;\n        }\n\n        return cellVM;\n    }\n\n    export function prepareCellVM(cell: ICell, mainState: IMainState): ICellViewModel {\n        let cellVM: ICellViewModel = createCellVM(cell, mainState.settings, false, mainState.debugging);\n\n        const visible = mainState.settings ? mainState.settings.showCellInputCode : false;\n        const expanded = !mainState.settings?.collapseCellInputCodeByDefault;\n\n        // Set initial cell visibility and collapse\n        cellVM = alterCellVM(cellVM, mainState.settings, visible, expanded);\n        cellVM.hasBeenRun = true;\n\n        return cellVM;\n    }\n\n    export function startCell(arg: InteractiveReducerArg<ICell>): IMainState {\n        if (isCellSupported(arg.prevState, arg.payload.data)) {\n            const result = Helpers.updateOrAdd(arg, prepareCellVM);\n            if (\n                result.cellVMs.length > arg.prevState.cellVMs.length &&\n                arg.payload.data.id !== Identifiers.EditCellId\n            ) {\n                const cellVM = result.cellVMs[result.cellVMs.length - 1];\n\n                // We're adding a new cell here. Tell the intellisense engine we have a new cell\n                postActionToExtension(arg, InteractiveWindowMessages.UpdateModel, {\n                    source: 'user',\n                    kind: 'add',\n                    oldDirty: arg.prevState.dirty,\n                    newDirty: true,\n                    cell: cellVM.cell,\n                    fullText: extractInputText(cellVM, result.settings),\n                    currentText: cellVM.inputBlockText\n                });\n            }\n\n            return result;\n        }\n        return arg.prevState;\n    }\n\n    export function updateCell(arg: InteractiveReducerArg<ICell>): IMainState {\n        if (isCellSupported(arg.prevState, arg.payload.data)) {\n            return Helpers.updateOrAdd(arg, prepareCellVM);\n        }\n        return arg.prevState;\n    }\n\n    export function finishCell(arg: InteractiveReducerArg<ICell>): IMainState {\n        if (isCellSupported(arg.prevState, arg.payload.data)) {\n            return Helpers.updateOrAdd(arg, prepareCellVM);\n        }\n        return arg.prevState;\n    }\n\n    export function deleteAllCells(arg: InteractiveReducerArg<IAddCellAction>): IMainState {\n        // Send messages to other side to indicate the deletes\n        postActionToExtension(arg, InteractiveWindowMessages.DeleteAllCells);\n\n        return {\n            ...arg.prevState,\n            cellVMs: [],\n            undoStack: Helpers.pushStack(arg.prevState.undoStack, arg.prevState.cellVMs)\n        };\n    }\n\n    export function deleteCell(arg: InteractiveReducerArg<ICellAction>): IMainState {\n        const index = arg.prevState.cellVMs.findIndex(c => c.cell.id === arg.payload.data.cellId);\n        if (index >= 0 && arg.payload.data.cellId) {\n            // Send messages to other side to indicate the delete\n            postActionToExtension(arg, InteractiveWindowMessages.UpdateModel, {\n                source: 'user',\n                kind: 'remove',\n                index,\n                oldDirty: arg.prevState.dirty,\n                newDirty: true,\n                cell: arg.prevState.cellVMs[index].cell\n            });\n\n            const newVMs = arg.prevState.cellVMs.filter((_c, i) => i !== index);\n            return {\n                ...arg.prevState,\n                cellVMs: newVMs,\n                undoStack: Helpers.pushStack(arg.prevState.undoStack, arg.prevState.cellVMs)\n            };\n        }\n\n        return arg.prevState;\n    }\n\n    export function unmount(arg: InteractiveReducerArg): IMainState {\n        return {\n            ...arg.prevState,\n            cellVMs: [],\n            undoStack: [],\n            redoStack: [],\n            editCellVM: undefined\n        };\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n'use strict';\nimport { Identifiers } from '../../../../client/datascience/constants';\nimport { IScrollToCell } from '../../../../client/datascience/interactive-common/interactiveWindowTypes';\nimport { CssMessages } from '../../../../client/datascience/messages';\nimport { IDataScienceExtraSettings } from '../../../../client/datascience/types';\nimport { IMainState } from '../../../interactive-common/mainState';\nimport { postActionToExtension } from '../../../interactive-common/redux/helpers';\nimport { Helpers } from '../../../interactive-common/redux/reducers/helpers';\nimport { ICellAction, IScrollAction } from '../../../interactive-common/redux/reducers/types';\nimport { computeEditorOptions } from '../../../react-common/settingsReactSide';\nimport { InteractiveReducerArg } from '../mapping';\nimport { Creation } from './creation';\n\nexport namespace Effects {\n    export function expandAll(arg: InteractiveReducerArg): IMainState {\n        if (arg.prevState.settings?.showCellInputCode) {\n            const newVMs = arg.prevState.cellVMs.map(c =>\n                Creation.alterCellVM({ ...c }, arg.prevState.settings, true, true)\n            );\n            return {\n                ...arg.prevState,\n                cellVMs: newVMs\n            };\n        }\n        return arg.prevState;\n    }\n\n    export function collapseAll(arg: InteractiveReducerArg): IMainState {\n        if (arg.prevState.settings?.showCellInputCode) {\n            const newVMs = arg.prevState.cellVMs.map(c =>\n                Creation.alterCellVM({ ...c }, arg.prevState.settings, true, false)\n            );\n            return {\n                ...arg.prevState,\n                cellVMs: newVMs\n            };\n        }\n        return arg.prevState;\n    }\n\n    export function toggleInputBlock(arg: InteractiveReducerArg<ICellAction>): IMainState {\n        if (arg.payload.data.cellId) {\n            const newVMs = [...arg.prevState.cellVMs];\n            const index = arg.prevState.cellVMs.findIndex(c => c.cell.id === arg.payload.data.cellId);\n            const oldVM = arg.prevState.cellVMs[index];\n            newVMs[index] = Creation.alterCellVM({ ...oldVM }, arg.prevState.settings, true, !oldVM.inputBlockOpen);\n            return {\n                ...arg.prevState,\n                cellVMs: newVMs\n            };\n        }\n        return arg.prevState;\n    }\n\n    export function updateSettings(arg: InteractiveReducerArg<string>): IMainState {\n        // String arg should be the IDataScienceExtraSettings\n        const newSettingsJSON = JSON.parse(arg.payload.data);\n        const newSettings = <IDataScienceExtraSettings>newSettingsJSON;\n        const newEditorOptions = computeEditorOptions(newSettings);\n        const newFontFamily = newSettings.extraSettings\n            ? newSettings.extraSettings.editor.fontFamily\n            : arg.prevState.font.family;\n        const newFontSize = newSettings.extraSettings\n            ? newSettings.extraSettings.editor.fontSize\n            : arg.prevState.font.size;\n\n        // Ask for new theme data if necessary\n        if (\n            newSettings &&\n            newSettings.extraSettings &&\n            newSettings.extraSettings.theme !== arg.prevState.vscodeThemeName\n        ) {\n            const knownDark = Helpers.computeKnownDark(newSettings);\n            // User changed the current theme. Rerender\n            postActionToExtension(arg, CssMessages.GetCssRequest, { isDark: knownDark });\n            postActionToExtension(arg, CssMessages.GetMonacoThemeRequest, { isDark: knownDark });\n        }\n\n        // Update our input cell state if the user changed this setting\n        let newVMs = arg.prevState.cellVMs;\n        if (newSettings.showCellInputCode !== arg.prevState.settings?.showCellInputCode) {\n            newVMs = arg.prevState.cellVMs.map(c =>\n                Creation.alterCellVM(\n                    c,\n                    newSettings,\n                    newSettings.showCellInputCode,\n                    !newSettings.collapseCellInputCodeByDefault\n                )\n            );\n        }\n\n        return {\n            ...arg.prevState,\n            cellVMs: newVMs,\n            settings: newSettings,\n            editorOptions: newEditorOptions,\n            font: {\n                size: newFontSize,\n                family: newFontFamily\n            }\n        };\n    }\n\n    export function scrollToCell(arg: InteractiveReducerArg<IScrollToCell>): IMainState {\n        // Up the scroll count on the necessary cell\n        const index = arg.prevState.cellVMs.findIndex(c => c.cell.id === arg.payload.data.id);\n        if (index >= 0) {\n            const newVMs = [...arg.prevState.cellVMs];\n\n            // Scroll one cell and unscroll another.\n            newVMs[index] = { ...newVMs[index], scrollCount: newVMs[index].scrollCount + 1 };\n            return {\n                ...arg.prevState,\n                cellVMs: newVMs\n            };\n        }\n\n        return arg.prevState;\n    }\n\n    export function scrolled(arg: InteractiveReducerArg<IScrollAction>): IMainState {\n        return {\n            ...arg.prevState,\n            isAtBottom: arg.payload.data.isAtBottom\n        };\n    }\n\n    export function clickCell(arg: InteractiveReducerArg<ICellAction>): IMainState {\n        if (\n            arg.payload.data.cellId === Identifiers.EditCellId &&\n            arg.prevState.editCellVM &&\n            !arg.prevState.editCellVM.focused\n        ) {\n            return {\n                ...arg.prevState,\n                editCellVM: {\n                    ...arg.prevState.editCellVM,\n                    focused: true\n                }\n            };\n        } else if (arg.prevState.editCellVM) {\n            return {\n                ...arg.prevState,\n                editCellVM: {\n                    ...arg.prevState.editCellVM,\n                    focused: false\n                }\n            };\n        }\n\n        return arg.prevState;\n    }\n\n    export function unfocusCell(arg: InteractiveReducerArg<ICellAction>): IMainState {\n        if (\n            arg.payload.data.cellId === Identifiers.EditCellId &&\n            arg.prevState.editCellVM &&\n            arg.prevState.editCellVM.focused\n        ) {\n            return {\n                ...arg.prevState,\n                editCellVM: {\n                    ...arg.prevState.editCellVM,\n                    focused: false\n                }\n            };\n        }\n\n        return arg.prevState;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n'use strict';\n// tslint:disable-next-line: no-require-imports no-var-requires\nconst cloneDeep = require('lodash/cloneDeep');\nimport * as uuid from 'uuid/v4';\n\nimport { CellMatcher } from '../../../../client/datascience/cellMatcher';\nimport { InteractiveWindowMessages } from '../../../../client/datascience/interactive-common/interactiveWindowTypes';\nimport { CellState } from '../../../../client/datascience/types';\nimport { generateMarkdownFromCodeLines } from '../../../common';\nimport { createCellFrom } from '../../../common/cellFactory';\nimport { createCellVM, IMainState } from '../../../interactive-common/mainState';\nimport { postActionToExtension } from '../../../interactive-common/redux/helpers';\nimport { Helpers } from '../../../interactive-common/redux/reducers/helpers';\nimport { ICodeAction } from '../../../interactive-common/redux/reducers/types';\nimport { InteractiveReducerArg } from '../mapping';\nimport { Creation } from './creation';\n\nexport namespace Execution {\n    export function undo(arg: InteractiveReducerArg): IMainState {\n        if (arg.prevState.undoStack.length > 0) {\n            // Pop one off of our undo stack and update our redo\n            const cells = arg.prevState.undoStack[arg.prevState.undoStack.length - 1];\n            const undoStack = arg.prevState.undoStack.slice(0, arg.prevState.undoStack.length - 1);\n            const redoStack = Helpers.pushStack(arg.prevState.redoStack, arg.prevState.cellVMs);\n            postActionToExtension(arg, InteractiveWindowMessages.Undo);\n            return {\n                ...arg.prevState,\n                cellVMs: cells,\n                undoStack: undoStack,\n                redoStack: redoStack,\n                skipNextScroll: true\n            };\n        }\n\n        return arg.prevState;\n    }\n\n    export function redo(arg: InteractiveReducerArg): IMainState {\n        if (arg.prevState.redoStack.length > 0) {\n            // Pop one off of our redo stack and update our undo\n            const cells = arg.prevState.redoStack[arg.prevState.redoStack.length - 1];\n            const redoStack = arg.prevState.redoStack.slice(0, arg.prevState.redoStack.length - 1);\n            const undoStack = Helpers.pushStack(arg.prevState.undoStack, arg.prevState.cellVMs);\n            postActionToExtension(arg, InteractiveWindowMessages.Redo);\n            return {\n                ...arg.prevState,\n                cellVMs: cells,\n                undoStack: undoStack,\n                redoStack: redoStack,\n                skipNextScroll: true\n            };\n        }\n\n        return arg.prevState;\n    }\n\n    export function startDebugging(arg: InteractiveReducerArg): IMainState {\n        return {\n            ...arg.prevState,\n            debugging: true\n        };\n    }\n\n    export function stopDebugging(arg: InteractiveReducerArg): IMainState {\n        return {\n            ...arg.prevState,\n            debugging: false\n        };\n    }\n\n    export function submitInput(arg: InteractiveReducerArg<ICodeAction>): IMainState {\n        // noop if the submitted code is just a cell marker\n        const matcher = new CellMatcher(arg.prevState.settings);\n        if (matcher.stripFirstMarker(arg.payload.data.code).length > 0 && arg.prevState.editCellVM) {\n            // This should be from the edit cell VM. Copy it and change the cell id\n            let newCell = cloneDeep(arg.prevState.editCellVM);\n\n            // Change this editable cell to not editable.\n            newCell.cell.state = CellState.executing;\n            newCell.cell.data.source = arg.payload.data.code;\n\n            // Change type to markdown if necessary\n            const split = arg.payload.data.code.splitLines({ trim: false });\n            const firstLine = split[0];\n            if (matcher.isMarkdown(firstLine)) {\n                newCell.cell.data = createCellFrom(newCell.cell.data, 'markdown');\n                newCell.cell.data.source = generateMarkdownFromCodeLines(split);\n                newCell.cell.state = CellState.finished;\n            } else if (newCell.cell.data.cell_type === 'markdown') {\n                newCell.cell.state = CellState.finished;\n            }\n\n            // Update input controls (always show expanded since we just edited it.)\n            newCell = createCellVM(newCell.cell, arg.prevState.settings, false, false);\n            const collapseInputs = arg.prevState.settings\n                ? arg.prevState.settings.collapseCellInputCodeByDefault\n                : false;\n            newCell = Creation.alterCellVM(newCell, arg.prevState.settings, true, !collapseInputs);\n            newCell.useQuickEdit = false;\n\n            // Generate a new id\n            newCell.cell.id = uuid();\n\n            // Indicate this is direct input so that we don't hide it if the user has\n            // hide all inputs turned on.\n            newCell.directInput = true;\n\n            // Send a message to execute this code if necessary.\n            if (newCell.cell.state !== CellState.finished) {\n                postActionToExtension(arg, InteractiveWindowMessages.SubmitNewCell, {\n                    code: arg.payload.data.code,\n                    id: newCell.cell.id\n                });\n            }\n\n            // Stick in a new cell at the bottom that's editable and update our state\n            // so that the last cell becomes busy\n            return {\n                ...arg.prevState,\n                cellVMs: [...arg.prevState.cellVMs, newCell],\n                undoStack: Helpers.pushStack(arg.prevState.undoStack, arg.prevState.cellVMs),\n                skipNextScroll: false,\n                submittedText: true\n            };\n        }\n        return arg.prevState;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n'use strict';\nimport { InteractiveWindowMessages } from '../../../../client/datascience/interactive-common/interactiveWindowTypes';\nimport { CssMessages, SharedMessages } from '../../../../client/datascience/messages';\nimport { CommonEffects } from '../../../interactive-common/redux/reducers/commonEffects';\nimport { Kernel } from '../../../interactive-common/redux/reducers/kernel';\nimport { Transfer } from '../../../interactive-common/redux/reducers/transfer';\nimport { CommonActionType } from '../../../interactive-common/redux/reducers/types';\nimport { IInteractiveActionMapping } from '../mapping';\nimport { Creation } from './creation';\nimport { Effects } from './effects';\nimport { Execution } from './execution';\n\n// The list of reducers. 1 per message/action.\nexport const reducerMap: Partial<IInteractiveActionMapping> = {\n    // State updates\n    [CommonActionType.RESTART_KERNEL]: Kernel.restartKernel,\n    [CommonActionType.INTERRUPT_KERNEL]: Kernel.interruptKernel,\n    [InteractiveWindowMessages.SelectKernel]: Kernel.selectKernel,\n    [CommonActionType.SELECT_SERVER]: Kernel.selectJupyterURI,\n    [CommonActionType.OPEN_SETTINGS]: CommonEffects.openSettings,\n    [CommonActionType.EXPORT]: Transfer.exportCells,\n    [CommonActionType.SAVE]: Transfer.save,\n    [CommonActionType.SHOW_DATA_VIEWER]: Transfer.showDataViewer,\n    [CommonActionType.DELETE_CELL]: Creation.deleteCell,\n    [InteractiveWindowMessages.ShowPlot]: Transfer.showPlot,\n    [CommonActionType.LINK_CLICK]: Transfer.linkClick,\n    [CommonActionType.GOTO_CELL]: Transfer.gotoCell,\n    [CommonActionType.TOGGLE_INPUT_BLOCK]: Effects.toggleInputBlock,\n    [CommonActionType.COPY_CELL_CODE]: Transfer.copyCellCode,\n    [CommonActionType.GATHER_CELL]: Transfer.gather,\n    [CommonActionType.EDIT_CELL]: Transfer.editCell,\n    [CommonActionType.SUBMIT_INPUT]: Execution.submitInput,\n    [InteractiveWindowMessages.ExpandAll]: Effects.expandAll,\n    [CommonActionType.EDITOR_LOADED]: Transfer.started,\n    [CommonActionType.SCROLL]: Effects.scrolled,\n    [CommonActionType.CLICK_CELL]: Effects.clickCell,\n    [CommonActionType.UNFOCUS_CELL]: Effects.unfocusCell,\n    [CommonActionType.UNMOUNT]: Creation.unmount,\n    [CommonActionType.FOCUS_INPUT]: CommonEffects.focusInput,\n\n    // Messages from the webview (some are ignored)\n    [InteractiveWindowMessages.Undo]: Execution.undo,\n    [InteractiveWindowMessages.Redo]: Execution.redo,\n    [InteractiveWindowMessages.StartCell]: Creation.startCell,\n    [InteractiveWindowMessages.FinishCell]: Creation.finishCell,\n    [InteractiveWindowMessages.UpdateCell]: Creation.updateCell,\n    [InteractiveWindowMessages.Activate]: CommonEffects.activate,\n    [InteractiveWindowMessages.RestartKernel]: Kernel.handleRestarted,\n    [CssMessages.GetCssResponse]: CommonEffects.handleCss,\n    [InteractiveWindowMessages.MonacoReady]: CommonEffects.monacoReady,\n    [CssMessages.GetMonacoThemeResponse]: CommonEffects.monacoThemeChange,\n    [InteractiveWindowMessages.GetAllCells]: Transfer.getAllCells,\n    [InteractiveWindowMessages.ExpandAll]: Effects.expandAll,\n    [InteractiveWindowMessages.CollapseAll]: Effects.collapseAll,\n    [InteractiveWindowMessages.DeleteAllCells]: Creation.deleteAllCells,\n    [InteractiveWindowMessages.StartProgress]: CommonEffects.startProgress,\n    [InteractiveWindowMessages.StopProgress]: CommonEffects.stopProgress,\n    [SharedMessages.UpdateSettings]: Effects.updateSettings,\n    [InteractiveWindowMessages.StartDebugging]: Execution.startDebugging,\n    [InteractiveWindowMessages.StopDebugging]: Execution.stopDebugging,\n    [InteractiveWindowMessages.ScrollToCell]: Effects.scrollToCell,\n    [InteractiveWindowMessages.UpdateKernel]: Kernel.updateStatus,\n    [SharedMessages.LocInit]: CommonEffects.handleLocInit\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n'use strict';\r\n\r\n// This must be on top, do not change. Required by webpack.\r\nimport '../common/main';\r\n// This must be on top, do not change. Required by webpack.\r\n\r\n// tslint:disable-next-line: ordered-imports\r\nimport '../common/index.css';\r\n\r\nimport * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport { IVsCodeApi } from '../react-common/postOffice';\r\nimport { detectBaseTheme } from '../react-common/themeDetector';\r\nimport { getConnectedInteractiveEditor } from './interactivePanel';\r\nimport { createStore } from './redux/store';\r\n\r\n// This special function talks to vscode from a web panel\r\nexport declare function acquireVsCodeApi(): IVsCodeApi;\r\nconst baseTheme = detectBaseTheme();\r\n// tslint:disable-next-line: no-any\r\nconst testMode = (window as any).inTestMode;\r\n// tslint:disable-next-line: no-typeof-undefined\r\nconst skipDefault = testMode ? false : typeof acquireVsCodeApi !== 'undefined';\r\n\r\n// Create the redux store\r\nconst store = createStore(skipDefault, baseTheme, testMode);\r\n\r\n// Wire up a connected react control for our InteractiveEditor\r\nconst ConnectedInteractiveEditor = getConnectedInteractiveEditor();\r\n\r\n// Stick them all together\r\n// tslint:disable:no-typeof-undefined\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <ConnectedInteractiveEditor />\r\n    </Provider>,\r\n    document.getElementById('root') as HTMLElement\r\n);\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n'use strict';\n\nimport * as ReduxCommon from '../../interactive-common/redux/store';\nimport { reducerMap } from './reducers';\n\n// This special version uses the reducer map from the IInteractiveWindowMapping\nexport function createStore(skipDefault: boolean, baseTheme: string, testMode: boolean) {\n    return ReduxCommon.createStore(skipDefault, baseTheme, testMode, false, reducerMap);\n}\n","\nvar content = require(\"!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./interactivePanel.less\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./interactivePanel.less\", function() {\n\t\tvar newContent = require(\"!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./interactivePanel.less\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}"],"sourceRoot":""}